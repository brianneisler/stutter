import isChar from './isChar'

describe('isChar', () => {
  test('returns true for a string with one character', () => {
    expect(isChar('a')).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isChar(undefined)).toBe(false)
    expect(isChar(null)).toBe(false)
    expect(isChar('')).toBe(false)
    expect(isChar('abc')).toBe(false)
    expect(isChar(0)).toBe(false)
    expect(isChar(-1)).toBe(false)
    expect(isChar(1)).toBe(false)
    expect(isChar(false)).toBe(false)
    expect(isChar(true)).toBe(false)
    expect(isChar(NaN)).toBe(false)
    expect(isChar(Infinity)).toBe(false)
    expect(isChar(-Infinity)).toBe(false)
    expect(isChar({})).toBe(false)
    expect(isChar([])).toBe(false)
    expect(isChar(/abc/)).toBe(false)
    expect(isChar(async () => {})).toBe(false)
    expect(isChar(() => {})).toBe(false)
    expect(isChar(function() {})).toBe(false)
    expect(isChar((function*() {})())).toBe(false)
    expect(isChar(new Array(0))).toBe(false)
    expect(isChar(new ArrayBuffer(2))).toBe(false)
    expect(isChar(new Boolean(false))).toBe(false)
    expect(isChar(new Boolean(true))).toBe(false)
    expect(isChar(new Date())).toBe(false)
    expect(isChar(new Error())).toBe(false)
    expect(isChar(new Number(1))).toBe(false)
    expect(isChar(new Promise(() => {}))).toBe(false)
    expect(isChar(new Proxy({}, {}))).toBe(false)
    expect(isChar(new Set())).toBe(false)
    expect(isChar(new String('abc'))).toBe(false)
    expect(isChar(Symbol('abc'))).toBe(false)
    expect(isChar(new WeakMap())).toBe(false)
    expect(isChar(new WeakSet())).toBe(false)
  })
})
