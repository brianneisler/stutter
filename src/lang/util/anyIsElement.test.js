import Element from '../classes/Element'
import anyIsElement from './anyIsElement'

describe('anyIsElement', () => {
  test('returns true for a Element', () => {
    const value = new Element({})
    expect(anyIsElement(value)).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsElement(undefined)).toBe(false)
    expect(anyIsElement(null)).toBe(false)
    expect(anyIsElement('')).toBe(false)
    expect(anyIsElement('abc')).toBe(false)
    expect(anyIsElement(false)).toBe(false)
    expect(anyIsElement(true)).toBe(false)
    expect(anyIsElement(0)).toBe(false)
    expect(anyIsElement(-1)).toBe(false)
    expect(anyIsElement(1)).toBe(false)
    expect(anyIsElement(NaN)).toBe(false)
    expect(anyIsElement(Infinity)).toBe(false)
    expect(anyIsElement(-Infinity)).toBe(false)
    expect(anyIsElement({})).toBe(false)
    expect(anyIsElement([])).toBe(false)
    expect(anyIsElement(new Array(0))).toBe(false)
    expect(anyIsElement([0])).toBe(false)
    expect(anyIsElement(/abc/)).toBe(false)
    expect(anyIsElement(async () => {})).toBe(false)
    expect(anyIsElement(() => {})).toBe(false)
    expect(anyIsElement(function () {})).toBe(false)
    expect(anyIsElement((function* () {})())).toBe(false)
    expect(anyIsElement(Symbol('abc'))).toBe(false)
    expect(anyIsElement(Symbol.for('def'))).toBe(false)
    expect(anyIsElement(new ArrayBuffer(2))).toBe(false)
    expect(anyIsElement(new Boolean(false))).toBe(false)
    expect(anyIsElement(new Boolean(true))).toBe(false)
    expect(anyIsElement(new Date())).toBe(false)
    expect(anyIsElement(new Error())).toBe(false)
    expect(anyIsElement(new Map())).toBe(false)
    expect(anyIsElement(new Number(1))).toBe(false)
    expect(anyIsElement(new Promise(() => {}))).toBe(false)
    expect(anyIsElement(new Proxy({}, {}))).toBe(false)
    expect(anyIsElement(new Set())).toBe(false)
    expect(anyIsElement(new String('abc'))).toBe(false)
    expect(anyIsElement(new WeakMap())).toBe(false)
    expect(anyIsElement(new WeakSet())).toBe(false)
  })
})
