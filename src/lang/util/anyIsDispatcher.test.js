import Dispatcher from '../classes/Dispatcher'
import anyIsDispatcher from './anyIsDispatcher'

describe('anyIsDispatcher', () => {
  test('returns true for a Dispatcher', () => {
    const value = new Dispatcher({})
    expect(anyIsDispatcher(value)).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsDispatcher(undefined)).toBe(false)
    expect(anyIsDispatcher(null)).toBe(false)
    expect(anyIsDispatcher('')).toBe(false)
    expect(anyIsDispatcher('abc')).toBe(false)
    expect(anyIsDispatcher(false)).toBe(false)
    expect(anyIsDispatcher(true)).toBe(false)
    expect(anyIsDispatcher(0)).toBe(false)
    expect(anyIsDispatcher(-1)).toBe(false)
    expect(anyIsDispatcher(1)).toBe(false)
    expect(anyIsDispatcher(NaN)).toBe(false)
    expect(anyIsDispatcher(Infinity)).toBe(false)
    expect(anyIsDispatcher(-Infinity)).toBe(false)
    expect(anyIsDispatcher({})).toBe(false)
    expect(anyIsDispatcher([])).toBe(false)
    expect(anyIsDispatcher(new Array(0))).toBe(false)
    expect(anyIsDispatcher([0])).toBe(false)
    expect(anyIsDispatcher(/abc/)).toBe(false)
    expect(anyIsDispatcher(async () => {})).toBe(false)
    expect(anyIsDispatcher(() => {})).toBe(false)
    expect(anyIsDispatcher(function () {})).toBe(false)
    expect(anyIsDispatcher((function* () {})())).toBe(false)
    expect(anyIsDispatcher(Symbol('abc'))).toBe(false)
    expect(anyIsDispatcher(Symbol.for('def'))).toBe(false)
    expect(anyIsDispatcher(new ArrayBuffer(2))).toBe(false)
    expect(anyIsDispatcher(new Boolean(false))).toBe(false)
    expect(anyIsDispatcher(new Boolean(true))).toBe(false)
    expect(anyIsDispatcher(new Date())).toBe(false)
    expect(anyIsDispatcher(new Error())).toBe(false)
    expect(anyIsDispatcher(new Map())).toBe(false)
    expect(anyIsDispatcher(new Number(1))).toBe(false)
    expect(anyIsDispatcher(new Promise(() => {}))).toBe(false)
    expect(anyIsDispatcher(new Proxy({}, {}))).toBe(false)
    expect(anyIsDispatcher(new Set())).toBe(false)
    expect(anyIsDispatcher(new String('abc'))).toBe(false)
    expect(anyIsDispatcher(new WeakMap())).toBe(false)
    expect(anyIsDispatcher(new WeakSet())).toBe(false)
  })
})
