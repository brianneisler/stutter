import anyIsNativeObject from './anyIsNativeObject'

describe('anyIsNativeObject', () => {
  test('returns true for instances of native objects', () => {
    expect(anyIsNativeObject(new Array(0))).toBe(true)
    expect(anyIsNativeObject(new ArrayBuffer(2))).toBe(true)
    expect(anyIsNativeObject(new Boolean(false))).toBe(true)
    expect(anyIsNativeObject(new Boolean(true))).toBe(true)
    expect(anyIsNativeObject(new Date())).toBe(true)
    expect(anyIsNativeObject(new Error())).toBe(true)
    expect(anyIsNativeObject(new Number(1))).toBe(true)
    expect(anyIsNativeObject(new Promise(() => {}))).toBe(true)
    // expect(anyIsNativeObject(new Proxy({}, {}))).toBe(true)
    expect(anyIsNativeObject(new Set())).toBe(true)
    expect(anyIsNativeObject(new String('abc'))).toBe(true)
    // expect(anyIsNativeObject(Symbol('abc'))).toBe(true)
    expect(anyIsNativeObject(new WeakMap())).toBe(true)
    expect(anyIsNativeObject(new WeakSet())).toBe(true)
    expect(anyIsNativeObject(/abc/)).toBe(true)
    expect(anyIsNativeObject([])).toBe(true)

    expect(anyIsNativeObject(async () => {})).toBe(true)
    expect(anyIsNativeObject(() => {})).toBe(true)
    expect(anyIsNativeObject(function() {})).toBe(true)
    expect(anyIsNativeObject(function*() {})).toBe(true)
    expect(anyIsNativeObject((function*() {})())).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsNativeObject(undefined)).toBe(false)
    expect(anyIsNativeObject(null)).toBe(false)
    expect(anyIsNativeObject('')).toBe(false)
    expect(anyIsNativeObject('abc')).toBe(false)
    expect(anyIsNativeObject(false)).toBe(false)
    expect(anyIsNativeObject(true)).toBe(false)
    expect(anyIsNativeObject(0)).toBe(false)
    expect(anyIsNativeObject(-1)).toBe(false)
    expect(anyIsNativeObject(1)).toBe(false)
    expect(anyIsNativeObject(NaN)).toBe(false)
    expect(anyIsNativeObject(Infinity)).toBe(false)
    expect(anyIsNativeObject(-Infinity)).toBe(false)
    expect(anyIsNativeObject({})).toBe(false)
  })
})
