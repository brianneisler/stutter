import Context from '../classes/Context'
import anyIsContext from './anyIsContext'

describe('anyIsContext', () => {
  test('returns true for a Context', () => {
    const type = new Context({})
    expect(anyIsContext(type)).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsContext(undefined)).toBe(false)
    expect(anyIsContext(null)).toBe(false)
    expect(anyIsContext('')).toBe(false)
    expect(anyIsContext('abc')).toBe(false)
    expect(anyIsContext(false)).toBe(false)
    expect(anyIsContext(true)).toBe(false)
    expect(anyIsContext(0)).toBe(false)
    expect(anyIsContext(-1)).toBe(false)
    expect(anyIsContext(1)).toBe(false)
    expect(anyIsContext(NaN)).toBe(false)
    expect(anyIsContext(Infinity)).toBe(false)
    expect(anyIsContext(-Infinity)).toBe(false)
    expect(anyIsContext({})).toBe(false)
    expect(anyIsContext([])).toBe(false)
    expect(anyIsContext(new Array(0))).toBe(false)
    expect(anyIsContext([0])).toBe(false)
    expect(anyIsContext(/abc/)).toBe(false)
    expect(anyIsContext(async () => {})).toBe(false)
    expect(anyIsContext(() => {})).toBe(false)
    expect(anyIsContext(function () {})).toBe(false)
    expect(anyIsContext((function* () {})())).toBe(false)
    expect(anyIsContext(Symbol('abc'))).toBe(false)
    expect(anyIsContext(Symbol.for('def'))).toBe(false)
    expect(anyIsContext(new ArrayBuffer(2))).toBe(false)
    expect(anyIsContext(new Boolean(false))).toBe(false)
    expect(anyIsContext(new Boolean(true))).toBe(false)
    expect(anyIsContext(new Date())).toBe(false)
    expect(anyIsContext(new Error())).toBe(false)
    expect(anyIsContext(new Map())).toBe(false)
    expect(anyIsContext(new Number(1))).toBe(false)
    expect(anyIsContext(new Promise(() => {}))).toBe(false)
    expect(anyIsContext(new Proxy({}, {}))).toBe(false)
    expect(anyIsContext(new Set())).toBe(false)
    expect(anyIsContext(new String('abc'))).toBe(false)
    expect(anyIsContext(new WeakMap())).toBe(false)
    expect(anyIsContext(new WeakSet())).toBe(false)
  })
})
