import anyIsCharacter from './anyIsCharacter'

describe('anyIsCharacter', () => {
  test('returns true for a string with one character', () => {
    expect(anyIsCharacter('a')).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsCharacter(undefined)).toBe(false)
    expect(anyIsCharacter(null)).toBe(false)
    expect(anyIsCharacter('')).toBe(false)
    expect(anyIsCharacter('abc')).toBe(false)
    expect(anyIsCharacter(0)).toBe(false)
    expect(anyIsCharacter(-1)).toBe(false)
    expect(anyIsCharacter(1)).toBe(false)
    expect(anyIsCharacter(false)).toBe(false)
    expect(anyIsCharacter(true)).toBe(false)
    expect(anyIsCharacter(NaN)).toBe(false)
    expect(anyIsCharacter(Infinity)).toBe(false)
    expect(anyIsCharacter(-Infinity)).toBe(false)
    expect(anyIsCharacter({})).toBe(false)
    expect(anyIsCharacter([])).toBe(false)
    expect(anyIsCharacter(/abc/)).toBe(false)
    expect(anyIsCharacter(async () => {})).toBe(false)
    expect(anyIsCharacter(() => {})).toBe(false)
    expect(anyIsCharacter(function() {})).toBe(false)
    expect(anyIsCharacter((function*() {})())).toBe(false)
    expect(anyIsCharacter(new Array(0))).toBe(false)
    expect(anyIsCharacter(new ArrayBuffer(2))).toBe(false)
    expect(anyIsCharacter(new Boolean(false))).toBe(false)
    expect(anyIsCharacter(new Boolean(true))).toBe(false)
    expect(anyIsCharacter(new Date())).toBe(false)
    expect(anyIsCharacter(new Error())).toBe(false)
    expect(anyIsCharacter(new Number(1))).toBe(false)
    expect(anyIsCharacter(new Promise(() => {}))).toBe(false)
    expect(anyIsCharacter(new Proxy({}, {}))).toBe(false)
    expect(anyIsCharacter(new Set())).toBe(false)
    expect(anyIsCharacter(new String('abc'))).toBe(false)
    expect(anyIsCharacter(Symbol('abc'))).toBe(false)
    expect(anyIsCharacter(new WeakMap())).toBe(false)
    expect(anyIsCharacter(new WeakSet())).toBe(false)
  })
})
