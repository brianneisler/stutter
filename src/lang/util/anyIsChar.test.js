import anyIsChar from './anyIsChar'

describe('anyIsChar', () => {
  test('returns true for a string with one character', () => {
    expect(anyIsChar('a')).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsChar(undefined)).toBe(false)
    expect(anyIsChar(null)).toBe(false)
    expect(anyIsChar('')).toBe(false)
    expect(anyIsChar('abc')).toBe(false)
    expect(anyIsChar(0)).toBe(false)
    expect(anyIsChar(-1)).toBe(false)
    expect(anyIsChar(1)).toBe(false)
    expect(anyIsChar(false)).toBe(false)
    expect(anyIsChar(true)).toBe(false)
    expect(anyIsChar(NaN)).toBe(false)
    expect(anyIsChar(Infinity)).toBe(false)
    expect(anyIsChar(-Infinity)).toBe(false)
    expect(anyIsChar({})).toBe(false)
    expect(anyIsChar([])).toBe(false)
    expect(anyIsChar(/abc/)).toBe(false)
    expect(anyIsChar(async () => {})).toBe(false)
    expect(anyIsChar(() => {})).toBe(false)
    expect(anyIsChar(function() {})).toBe(false)
    expect(anyIsChar((function*() {})())).toBe(false)
    expect(anyIsChar(new Array(0))).toBe(false)
    expect(anyIsChar(new ArrayBuffer(2))).toBe(false)
    expect(anyIsChar(new Boolean(false))).toBe(false)
    expect(anyIsChar(new Boolean(true))).toBe(false)
    expect(anyIsChar(new Date())).toBe(false)
    expect(anyIsChar(new Error())).toBe(false)
    expect(anyIsChar(new Number(1))).toBe(false)
    expect(anyIsChar(new Promise(() => {}))).toBe(false)
    expect(anyIsChar(new Proxy({}, {}))).toBe(false)
    expect(anyIsChar(new Set())).toBe(false)
    expect(anyIsChar(new String('abc'))).toBe(false)
    expect(anyIsChar(Symbol('abc'))).toBe(false)
    expect(anyIsChar(new WeakMap())).toBe(false)
    expect(anyIsChar(new WeakSet())).toBe(false)
  })
})
