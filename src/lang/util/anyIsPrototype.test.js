import anyIsPrototype from './anyIsPrototype'

describe('anyIsPrototype', () => {
  it('returns true for an object prototype', () => {
    const value = {}
    expect(anyIsPrototype(Object.getPrototypeOf(value))).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(anyIsPrototype(undefined)).toBe(false)
    expect(anyIsPrototype(null)).toBe(false)
    expect(anyIsPrototype('')).toBe(false)
    expect(anyIsPrototype('abc')).toBe(false)
    expect(anyIsPrototype(false)).toBe(false)
    expect(anyIsPrototype(true)).toBe(false)
    expect(anyIsPrototype(0)).toBe(false)
    expect(anyIsPrototype(-1)).toBe(false)
    expect(anyIsPrototype(1)).toBe(false)
    expect(anyIsPrototype(NaN)).toBe(false)
    expect(anyIsPrototype(Infinity)).toBe(false)
    expect(anyIsPrototype(-Infinity)).toBe(false)
    expect(anyIsPrototype([])).toBe(false)
    expect(anyIsPrototype(new Array(0))).toBe(false)
    expect(anyIsPrototype([0])).toBe(false)
    expect(anyIsPrototype({})).toBe(false)
    expect(anyIsPrototype(/abc/)).toBe(false)
    expect(anyIsPrototype(async () => {})).toBe(false)
    expect(anyIsPrototype(() => {})).toBe(false)
    expect(anyIsPrototype(function() {})).toBe(false)
    expect(anyIsPrototype((function*() {})())).toBe(false)
    expect(anyIsPrototype(new ArrayBuffer(2))).toBe(false)
    expect(anyIsPrototype(new Boolean(false))).toBe(false)
    expect(anyIsPrototype(new Boolean(true))).toBe(false)
    expect(anyIsPrototype(new Date())).toBe(false)
    expect(anyIsPrototype(new Error())).toBe(false)
    expect(anyIsPrototype(new Map())).toBe(false)
    expect(anyIsPrototype(new Number(1))).toBe(false)
    expect(anyIsPrototype(new Promise(() => {}))).toBe(false)
    expect(anyIsPrototype(new Proxy({}, {}))).toBe(false)
    expect(anyIsPrototype(new Set())).toBe(false)
    expect(anyIsPrototype(new String('abc'))).toBe(false)
    expect(anyIsPrototype(Symbol('abc'))).toBe(false)
    expect(anyIsPrototype(Symbol.for('def'))).toBe(false)
    expect(anyIsPrototype(new WeakMap())).toBe(false)
    expect(anyIsPrototype(new WeakSet())).toBe(false)
  })
})
