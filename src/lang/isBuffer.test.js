import isBuffer from './isBuffer'

describe('isBuffer', () => {
  test('returns true for Buffer', () => {
    expect(isBuffer(Buffer.from([]))).toBe(true)
  })

  test('returns false for all other values', () => {
    expect(isBuffer(undefined)).toBe(false)
    expect(isBuffer(null)).toBe(false)
    expect(isBuffer('')).toBe(false)
    expect(isBuffer('abc')).toBe(false)
    expect(isBuffer(0)).toBe(false)
    expect(isBuffer(-1)).toBe(false)
    expect(isBuffer(1)).toBe(false)
    expect(isBuffer(false)).toBe(false)
    expect(isBuffer(true)).toBe(false)
    expect(isBuffer(NaN)).toBe(false)
    expect(isBuffer(Infinity)).toBe(false)
    expect(isBuffer(-Infinity)).toBe(false)
    expect(isBuffer({})).toBe(false)
    expect(isBuffer([])).toBe(false)
    expect(isBuffer(/abc/)).toBe(false)
    expect(isBuffer(async () => {})).toBe(false)
    expect(isBuffer(() => {})).toBe(false)
    expect(isBuffer(function() {})).toBe(false)
    expect(isBuffer((function*() {})())).toBe(false)
    expect(isBuffer(new Array(0))).toBe(false)
    expect(isBuffer(new ArrayBuffer(2))).toBe(false)
    expect(isBuffer(new Boolean(false))).toBe(false)
    expect(isBuffer(new Boolean(true))).toBe(false)
    expect(isBuffer(new Date())).toBe(false)
    expect(isBuffer(new Error())).toBe(false)
    expect(isBuffer(new Number(1))).toBe(false)
    expect(isBuffer(new Promise(() => {}))).toBe(false)
    expect(isBuffer(new Proxy({}, {}))).toBe(false)
    expect(isBuffer(new Set())).toBe(false)
    expect(isBuffer(new String('abc'))).toBe(false)
    expect(isBuffer(Symbol('abc'))).toBe(false)
    expect(isBuffer(new WeakMap())).toBe(false)
    expect(isBuffer(new WeakSet())).toBe(false)
  })
})
