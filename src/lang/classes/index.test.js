describe('lang.util.js index', () => {
  test('has expected methods', () => {
    const mod = require('./')
    expect(mod).toEqualPrintDiff({
      Array: expect.any(Function),
      ArrayBuffer: expect.any(Function),
      Boolean: expect.any(Function),
      Buffer: expect.any(Function),
      Context: expect.any(Function),
      Date: expect.any(Function),
      Dispatcher: expect.any(Function),
      Element: expect.any(Function),
      Error: expect.any(Function),
      Exception: expect.any(Function),
      Expected: expect.any(Function),
      Fn: expect.any(Function),
      Function: expect.any(Function),
      ImmutableList: expect.any(Function),
      ImmutableMap: expect.any(Function),
      ImmutableOrderedMap: expect.any(Function),
      ImmutableOrderedSet: expect.any(Function),
      ImmutableSet: expect.any(Function),
      ImmutableStack: expect.any(Function),
      Index: expect.any(Function),
      Infinity,
      Int8Array: expect.any(Function),
      Key: expect.any(Function),
      List: expect.any(Function),
      Map: expect.any(Function),
      Math: expect.any(Object),
      NaN,
      Namespace: expect.any(Function),
      Number: expect.any(Function),
      Object: expect.any(Function),
      Op: expect.any(Function),
      Parameter: expect.any(Function),
      Path: expect.any(Function),
      Promise: expect.any(Function),
      Property: expect.any(Function),
      Protocol: expect.any(Function),
      Proxy: expect.any(Function),
      Range: expect.any(Function),
      RangeError: expect.any(Function),
      ReferenceError: expect.any(Function),
      Reflect: expect.any(Object),
      RegExp: expect.any(Function),
      Repeat: expect.any(Function),
      RingBuffer: expect.any(Function),
      Seq: expect.any(Function),
      Set: expect.any(Function),
      Stack: expect.any(Function),
      String: expect.any(Function),
      Symbol: expect.any(Function),
      SyntaxError: expect.any(Function),
      Throwable: expect.any(Function),
      Type: expect.any(Function),
      TypeError: expect.any(Function),
      URIError: expect.any(Function),
      WeakMap: expect.any(Function),
      WeakSet: expect.any(Function),
      ZeroBuffer: expect.any(Function)
    })
  })
})
