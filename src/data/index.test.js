describe('data index', () => {
  test('has expected methods', () => {
    const mod = require('./')
    expect(mod).toEqual({
      any: expect.any(Function),
      anyAtIndex: expect.any(Function),
      append: expect.any(Function),
      assign: expect.any(Function),
      assoc: expect.any(Function),
      clone: expect.any(Function),
      compact: expect.any(Function),
      concat: expect.any(Function),
      contains: expect.any(Function),
      containsWith: expect.any(Function),
      endsWith: expect.any(Function),
      equals: expect.any(Function),
      every: expect.any(Function),
      everyAtIndex: expect.any(Function),
      filter: expect.any(Function),
      filterAtIndex: expect.any(Function),
      find: expect.any(Function),
      findAtIndex: expect.any(Function),
      findKdx: expect.any(Function),
      first: expect.any(Function),
      flatten: expect.any(Function),
      forEach: expect.any(Function),
      forEachIndexed: expect.any(Function),
      forEachObjIndexed: expect.any(Function),
      generateRandomId: expect.any(Function),
      head: expect.any(Function),
      indexOf: expect.any(Function),
      indexOfAtIndex: expect.any(Function),
      init: expect.any(Function),
      join: expect.any(Function),
      keys: expect.any(Function),
      last: expect.any(Function),
      length: expect.any(Function),
      lens: expect.any(Function),
      lensIndex: expect.any(Function),
      lensPath: expect.any(Function),
      lensProp: expect.any(Function),
      map: expect.any(Function),
      mapIndexed: expect.any(Function),
      mapObjIndexed: expect.any(Function),
      merge: expect.any(Function),
      mergeDeep: expect.any(Function),
      omit: expect.any(Function),
      over: expect.any(Function),
      pick: expect.any(Function),
      pickBy: expect.any(Function),
      prepend: expect.any(Function),
      reduce: expect.any(Function),
      reduceIndexed: expect.any(Function),
      reduceObjIndexed: expect.any(Function),
      reduceRight: expect.any(Function),
      reject: expect.any(Function),
      remove: expect.any(Function),
      rest: expect.any(Function),
      shallowEquals: expect.any(Function),
      slice: expect.any(Function),
      sort: expect.any(Function),
      split: expect.any(Function),
      stringToPath: expect.any(Function),
      tail: expect.any(Function),
      union: expect.any(Function),
      uniq: expect.any(Function),
      values: expect.any(Function),
      walk: expect.any(Function),
      walkReduce: expect.any(Function),
      walkReduceDepthFirst: expect.any(Function),
      walkReducePath: expect.any(Function),
      whereEq: expect.any(Function),
      without: expect.any(Function)
    })
  })
})
